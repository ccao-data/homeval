name: generate-pinval

on:
  workflow_dispatch:
    inputs:
      year:
        type: string
        description: >
          Assessment year: Use values and comps from the final model for this year.
          Leave blank if you are supplying a run ID instead
        required: false
        default: ""

      run_id:
        type: string
        description: >
          Run ID: The model run whose comps should be used. Leave blank if you are supplying
          an assessment year instead
        required: false
        default: ""

      pins:
        type: string
        description: >
          PINs: One or more spaceâ€‘separated Cook County PINs. Leave blank to
          generate reports for all PINs in the assessment triad
        required: false
        default: ""

      environment:
        type: choice
        description: >
          Environment: Choose where to upload the reports
        options:
          - Development bucket
          - Production bucket
        default: Development bucket
        required: true

env:
  PYTHONUNBUFFERED: "1"
  UV_SYSTEM_PYTHON: 1
  AWS_REGION: us-east-1
  AWS_ATHENA_S3_STAGING_DIR: s3://ccao-athena-results-us-east-1/
  HUGO_VERSION: "0.147.5"

defaults:
  run:
    # Always use builtin bash shell to take advantage of automatic -eo pipefail.
    # See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#defaultsrunshell
    shell: bash

jobs:
###############################################################################
# Setup
###############################################################################
  setup:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      matrix: ${{ steps.resolve-metadata.outputs.matrix }}
      count: ${{ steps.resolve-metadata.outputs.count }}
      assessment-year: ${{ steps.resolve-metadata.outputs.assessment-year }}
      run-id: ${{ steps.resolve-metadata.outputs.run-id }}
      triad: ${{ steps.resolve-metadata.outputs.triad }}
      bucket: ${{ steps.resolve-aws.outputs.bucket }}
      distribution-id: ${{ steps.resolve-aws.outputs.distribution-id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mask sensitive information
        run: echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: scripts/generate_pinval/uv.lock

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: scripts/generate_pinval/.python-version

      - name: Install Python requirements
        run: uv pip install .
        working-directory: scripts/generate_pinval

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME_ARN }}
          aws-region: us-east-1

      - name: Resolve model metadata
        id: resolve-metadata
        run: |
          # Parse PIN list to an array so we can safely pass it into this
          # script, which accepts multiple space-delimited PINs
          read -ra PINS <<< "${{ inputs.pins }}"
          python3 scripts/generate_pinval/resolve_model_metadata.py \
            --year "${{ inputs.year }}" \
            --run-id "${{ inputs.run_id }}" \
            --pin "${PINS[@]}" \
            --write-github-output

      - name: Resolve AWS resources
        id: resolve-aws
        run: |
          if [[ "${{ inputs.environment }}" == 'Development bucket' ]]; then
            BUCKET="${{ vars.AWS_S3_BUCKET_PINVAL_STAGING }}"
            DISTRIBUTION_ID="${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID_STAGING }}"
          else
            BUCKET="${{ vars.AWS_S3_BUCKET_PINVAL_PROD }}"
            DISTRIBUTION_ID="${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID_PROD }}"
          fi

          BUCKET_STR="bucket=${BUCKET}"
          echo "$BUCKET_STR"
          echo "$BUCKET_STR" >> "$GITHUB_OUTPUT"

          DISTRIBUTION_ID_STR="distribution-id=${DISTRIBUTION_ID}"
          echo "$DISTRIBUTION_ID_STR"
          echo "$DISTRIBUTION_ID_STR" >> "$GITHUB_OUTPUT"

###############################################################################
# Generate PINVAL reports for a triad or explicit PINs
###############################################################################
  generate-pinval:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      max-parallel: ${{ fromJson(needs.setup.outputs.count) }}
    env:
      TOWNSHIP: ${{ matrix.township }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mask sensitive information
        run: echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: scripts/generate_pinval/uv.lock

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: scripts/generate_pinval/.python-version

      - name: Install Python requirements
        run: uv pip install .
        working-directory: scripts/generate_pinval

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME_ARN }}
          aws-region: us-east-1

      - name: Cache Hugo package
        id: cache-hugo
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/hugo.deb
          key: hugo-deb-${{ env.HUGO_VERSION }}

      - name: Download Hugo
        if: steps.cache-hugo.outputs.cache-hit != 'true'
        run: |
          wget -O ${{ runner.temp }}/hugo.deb \
            https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb

      - name: Install Hugo
        run: sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Generate PINVAL reports
        env:
          RUN_ID: ${{ needs.setup.outputs.run-id }}
        run: |
          read -ra PINS <<< "${{ inputs.pins }}"
          python3 scripts/generate_pinval/generate_pinval.py \
            --run-id "$RUN_ID" \
            --township "$TOWNSHIP" \
            --pin "${PINS[@]}"

      - name: Sync reports to S3
        env:
          TARGET_BUCKET: ${{ needs.setup.outputs.bucket }}
          YEAR: ${{ needs.setup.outputs.assessment-year }}
        run: |
          LOCAL="hugo/public/${YEAR}/"
          REMOTE="${TARGET_BUCKET%/}/${YEAR}/"
          aws s3 sync "$LOCAL" "$REMOTE" \
            --no-progress \
            --include '*.html'

###############################################################################
# Invalidate cache and notify
###############################################################################
  notify:
    needs:
      - setup
      - generate-pinval
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME_ARN }}
          aws-region: us-east-1

      - name: Mask AWS identifiers
        run: |
          echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"
          echo "::add-mask::${{ secrets.AWS_SNS_NOTIFICATION_TOPIC_ARN }}"

      - name: Invalidate cache
        env:
          TARGET_DISTRIBUTION_ID: ${{ needs.setup.outputs.distribution-id }}
        run: |
          read -ra PINS <<< "${{ inputs.pins }}"
          INVALIDATION_PATHS=()
          if (( ${#PINS[@]} > 0 )); then
            for pin in "${PINS[@]:-}"; do
              INVALIDATION_PATHS+=("/${YEAR}/${pin}.html")
            done
          else
            INVALIDATION_PATHS+=("/${YEAR}/*.html")
          fi

          aws cloudfront create-invalidation \
            --distribution-id "${TARGET_DISTRIBUTION_ID}" \
            --paths "${INVALIDATION_PATHS[@]}"

      - name: Publish SNS notification
        env:
          RUN_ID: ${{ needs.setup.outputs.run-id }}
          YEAR: ${{ needs.setup.outputs.assessment-year }}
          TRIAD: ${{ needs.setup.outputs.triad }}
          ENV_LABEL: ${{ inputs.environment }}
          BUCKET: ${{ needs.setup.outputs.bucket }}
        run: |
          read -ra PINS <<< "${{ inputs.pins }}"
          SUBJECT="PINVAL reports ready for run-id $RUN_ID"
          MESSAGE=$(cat <<EOF
          Your requested PINVAL reports have been generated.

          Assessment year: $YEAR
          Run-ID: $RUN_ID
          Triad: $TRIAD
          PIN list: ${PINS[@]}
          Environment: $ENV_LABEL

          You can browse or download the reports at the following S3 path:
          $BUCKET/$YEAR/
          EOF
          )
          aws sns publish \
            --topic-arn "${{ secrets.AWS_SNS_NOTIFICATION_TOPIC_ARN }}" \
            --subject "$SUBJECT" \
            --message "$MESSAGE"
