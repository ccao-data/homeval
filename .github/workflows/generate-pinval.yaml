name: generate-pinval

on:
  workflow_dispatch:
    inputs:
      run_id:
        type: string
        description: >
          The run-ID of the model run whose comps should be used
          (e.g. 2025-02-11-charming-eric)
        required: true

      triad_name:
        type: string
        description: >
          Generate reports for every PIN in this triad (leave blank if you are
          supplying explicit PINs instead). Options: city, north, south.
        required: false
        default: ""

      pins:
        type: string
        description: >
          One or more comma-separated Cook County PINs. Leave blank if you are
          supplying a triad instead. Mutually-exclusive with triad_name.
        required: false
        default: ""

      environment:
        type: choice
        description: >
          Choose where to upload the reports.
        options:
          - Development bucket
          - Production bucket
        default: Development bucket
        required: false

env:
  PYTHONUNBUFFERED: "1"
  AWS_REGION: us-east-1
  AWS_ATHENA_S3_STAGING_DIR: s3://ccao-athena-results-us-east-1/

jobs:
###############################################################################
# Discover township codes when triad mode is requested
###############################################################################
  list-townships:
    if: ${{ inputs.triad_name != '' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME_ARN }}
          aws-region: us-east-1

      - name: Install Python dependencies for discovery
        run: |
          python -m pip install --upgrade pip
          pip install pyathena pandas

      - name: Collect township codes from Athena
        id: set-matrix
        env:
          RUN_ID: ${{ inputs.run_id }}
          TRIAD: ${{ inputs.triad_name }}
        run: |
          python - <<'PY'
          import json, os
          from pyathena import connect

          run_id = os.environ["RUN_ID"]
          triad  = os.environ["TRIAD"].lower()

          sql = f"""
            SELECT DISTINCT meta_township_code
            FROM z_ci_811_improve_pinval_models_for_hugo_frontmatter_integration_pinval.vw_assessment_card
            WHERE run_id = '{run_id}'
              AND assessment_triad = '{triad}'
            ORDER BY meta_township_code
          """

          codes = [row[0] for row in connect(region_name="us-east-1").cursor().execute(sql)]
          matrix = json.dumps({"township": codes})
          print(f"matrix={matrix}")

          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              fh.write(f"matrix={matrix}\n")
          PY

###############################################################################
# Generate PINVAL reports in parallel – one runner per township shard
###############################################################################
  generate-pinval-triad:
    if: ${{ inputs.triad_name != '' }}
    needs: list-townships
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.list-townships.outputs.matrix) }}
      max-parallel: 10   # adjust to balance speed vs. concurrency limits
    env:
      TOWNSHIP: ${{ matrix.township }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mask sensitive information
        run: echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: scripts/generate_pinval/.python-version

      - name: Create uv virtual environment
        run: uv venv
        working-directory: scripts/generate_pinval

      - name: Install Python requirements
        run: uv pip install .
        working-directory: scripts/generate_pinval

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME_ARN }}
          aws-region: us-east-1

      - name: Install Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.147.5'

      - name: Generate PINVAL reports (triad shard)
        run: |
          source scripts/generate_pinval/.venv/bin/activate
          python3 scripts/generate_pinval/generate_pinval.py \
            --run-id "${{ inputs.run_id }}" \
            --triad "${{ inputs.triad_name }}" \
            --township "$TOWNSHIP"

      - name: Upload artifact for township
        uses: actions/upload-artifact@v4
        with:
          name: site-${{ matrix.township }}
          path: hugo/public/
          retention-days: 2

###############################################################################
# Generate PINVAL reports for an explicit PIN list
###############################################################################
  generate-pinval-pins:
    if: ${{ inputs.triad_name == '' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mask sensitive information
        run: echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: scripts/generate_pinval/.python-version

      - name: Create uv virtual environment
        run: uv venv
        working-directory: scripts/generate_pinval

      - name: Install Python requirements
        run: uv pip install .
        working-directory: scripts/generate_pinval

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME_ARN }}
          aws-region: us-east-1

      - name: Install Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.147.5'

      - name: Generate PINVAL reports (explicit PINs)
        run: |
          source scripts/generate_pinval/.venv/bin/activate
          # Turn comma‑separated list into space‑separated shell words
          IFS=',' read -ra PINS <<< "${{ inputs.pins }}"
          python3 scripts/generate_pinval/generate_pinval.py \
            --run-id "${{ inputs.run_id }}" \
            --pin "${PINS[@]}"

      - name: Upload artifact for pin list
        uses: actions/upload-artifact@v4
        with:
          name: site-pinlist
          path: hugo/public/
          retention-days: 2

###############################################################################
# Deploy once after whichever generation job ran finishes
###############################################################################
  deploy:
    needs: [generate-pinval-triad, generate-pinval-pins]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME_ARN }}
          aws-region: us-east-1

      - name: Resolve target S3 bucket
        id: bucket
        run: |
          if [[ "${{ inputs.environment }}" == 'Development bucket' ]]; then
            echo "bucket=${{ vars.AWS_S3_BUCKET_PINVAL_STAGING }}" >> "$GITHUB_OUTPUT"
          else
            echo "bucket=${{ vars.AWS_S3_BUCKET_PINVAL_PROD }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: merged

      - name: Flatten artifacts into final site directory
        run: |
          mkdir -p final-site
          # copy only PIN-number HTML files, drop the entire path
          find merged -type f -name '[0-9]*.html' -exec cp -t final-site {} +

      - name: Mask SNS topic ARN
        run: echo "::add-mask::${{ secrets.AWS_SNS_NOTIFICATION_TOPIC_ARN }}"

      - name: Sync to S3
        env:
          TARGET_BUCKET: ${{ steps.bucket.outputs.bucket }}
        run: |
          YEAR="${{ inputs.run_id }}"; YEAR="${YEAR:0:4}"
          aws s3 sync final-site/ "${TARGET_BUCKET%/}/${YEAR}/" \
            --delete \
            --no-progress \
            --only-show-errors \
            --exclude '*' --include '*.html'

      - name: Publish SNS notification
        env:
          RUN_ID: ${{ inputs.run_id }}
          TRIAD: ${{ inputs.triad_name }}
          PINS: ${{ inputs.pins }}
          ENV_LABEL: ${{ inputs.environment }}
          URL_BASE: ${{ steps.bucket.outputs.bucket }}
        run: |
          SUBJECT="PINVAL reports ready for run-id $RUN_ID"
          MESSAGE=$(cat <<EOF
          Your requested PINVAL reports have been generated.

          Run-ID: $RUN_ID
          Triad: $TRIAD
          PIN list: $PINS
          Environment: $ENV_LABEL

          You can browse or download the reports here:
          $URL_BASE/${RUN_ID:0:4}/
          EOF
          )
          aws sns publish \
            --topic-arn "${{ secrets.AWS_SNS_NOTIFICATION_TOPIC_ARN }}" \
            --subject "$SUBJECT" \
            --message "$MESSAGE"
