name: generate-pinval

on:
  workflow_dispatch:
    inputs:
      run_id:
        type: string
        description: >
          Run ID: The model run whose comps should be used
        required: true
        default: "2025-02-11-charming-eric"

      triad_name:
        type: string
        description: >
          Triad name: Generate reports for every PIN in this triad. Leave blank if you are
          supplying PINs instead. Options: city, north, south
        required: false
        default: ""

      pins:
        type: string
        description: >
          PINs: One or more commaâ€‘separated Cook County PINs. Leave blank if you are
          supplying a triad instead
        required: false
        default: ""

      environment:
        type: choice
        description: >
          Environment: Choose where to upload the reports
        options:
          - Development bucket
          - Production bucket
        default: Development bucket
        required: false

env:
  PYTHONUNBUFFERED: "1"
  UV_SYSTEM_PYTHON: 1
  AWS_REGION: us-east-1
  AWS_ATHENA_S3_STAGING_DIR: s3://ccao-athena-results-us-east-1/
  HUGO_VERSION: "0.147.5"

jobs:
###############################################################################
# Setup
###############################################################################
  list-townships:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      count:  ${{ steps.set-matrix.outputs.count }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mask sensitive information
        run: echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: scripts/generate_pinval/uv.lock

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: scripts/generate_pinval/.python-version

      - name: Install Python requirements
        run: uv pip install .
        working-directory: scripts/generate_pinval

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME_ARN }}
          aws-region: us-east-1

      - name: Collect township codes (or fallback)
        id: set-matrix
        run: |
          python3 scripts/generate_pinval/list_townships.py \
            --run-id "${{ inputs.run_id }}" \
            --triad "${{ inputs.triad_name }}" \
            --write-github-output

###############################################################################
# Generate PINVAL reports for a triad or explicit PINs
###############################################################################
  generate-pinval:
    needs: list-townships
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.list-townships.outputs.matrix) }}
      max-parallel: ${{ fromJson(needs.list-townships.outputs.count) }}
    env:
      TOWNSHIP: ${{ matrix.township }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Mask sensitive information
        run: echo "::add-mask::${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: scripts/generate_pinval/uv.lock

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: scripts/generate_pinval/.python-version

      - name: Install Python requirements
        run: uv pip install .
        working-directory: scripts/generate_pinval

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME_ARN }}
          aws-region: us-east-1

      - name: Cache Hugo package
        id: cache-hugo
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/hugo.deb
          key: hugo-deb-${{ env.HUGO_VERSION }}

      - name: Download Hugo
        if: steps.cache-hugo.outputs.cache-hit != 'true'
        run: |
          wget -O ${{ runner.temp }}/hugo.deb \
            https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb

      - name: Install Hugo
        run: sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Generate PINVAL reports (triad shard or explicit PINs)
        run: |
          set -euo pipefail

          declare -a ARGS=(
            --run-id "${{ inputs.run_id }}"
            --triad "${{ inputs.triad_name }}"
            --township "$TOWNSHIP"
          )

          # Convert comma-separated input into an array, stripping blanks
          IFS=',' read -ra PINS_ARR <<< "${{ inputs.pins }}"
          CLEAN_PINS=()
          for p in "${PINS_ARR[@]:-}"; do
            [[ -n "$p" ]] && CLEAN_PINS+=("$p")
          done

          if [[ ${#CLEAN_PINS[@]} -gt 0 ]]; then
            ARGS+=(--pin "${CLEAN_PINS[@]}")
          fi

          echo "Running generate_pinval.py with: ${ARGS[*]}"
          python3 scripts/generate_pinval/generate_pinval.py ${ARGS[@]}"

      - name: Resolve target S3 bucket
        id: bucket
        run: |
          if [[ "${{ inputs.environment }}" == 'Development bucket' ]]; then
            echo "bucket=${{ vars.AWS_S3_BUCKET_PINVAL_STAGING }}" >> "$GITHUB_OUTPUT"
          else
            echo "bucket=${{ vars.AWS_S3_BUCKET_PINVAL_PROD }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Sync reports to S3
        env:
          TARGET_BUCKET: ${{ steps.bucket.outputs.bucket }}
        run: |
          RUN_ID="${{ inputs.run_id }}"
          YEAR="${RUN_ID:0:4}"
          LOCAL="hugo/public/${YEAR}/"
          REMOTE="${TARGET_BUCKET%/}/${YEAR}/"
          aws s3 sync "$LOCAL" "$REMOTE" \
            --no-progress \
            --include '*.html'

###############################################################################
# SNS Job
###############################################################################
  notify:
    needs: generate-pinval
    if: ${{ always() && needs.generate-pinval.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_TO_ASSUME_ARN }}
          aws-region: us-east-1

      - name: Mask SNS topic ARN
        run: echo "::add-mask::${{ secrets.AWS_SNS_NOTIFICATION_TOPIC_ARN }}"

      - name: Publish SNS notification
        env:
          RUN_ID: ${{ inputs.run_id }}
          TRIAD: ${{ inputs.triad_name }}
          PINS: ${{ inputs.pins }}
          ENV_LABEL: ${{ inputs.environment }}
          URL_BASE_DEV: ${{ vars.AWS_S3_BUCKET_PINVAL_STAGING }}
          URL_BASE_PROD: ${{ vars.AWS_S3_BUCKET_PINVAL_PROD }}
        run: |
          URL_BASE="$URL_BASE_DEV"
          if [[ "$ENV_LABEL" == 'Production bucket' ]]; then
            URL_BASE="$URL_BASE_PROD"
          fi
          SUBJECT="PINVAL reports ready for run-id $RUN_ID"
          MESSAGE=$(cat <<EOF
          Your requested PINVAL reports have been generated.

          Run-ID: $RUN_ID
          Triad: $TRIAD
          PIN list: $PINS
          Environment: $ENV_LABEL

          You can browse or download the reports here:
          $URL_BASE/${RUN_ID:0:4}/
          EOF
          )
          aws sns publish \
            --topic-arn "${{ secrets.AWS_SNS_NOTIFICATION_TOPIC_ARN }}" \
            --subject "$SUBJECT" \
            --message "$MESSAGE"
